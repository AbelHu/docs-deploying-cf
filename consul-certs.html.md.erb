---
title: Generating Certificates for Consul
---

As of [cf-release v216](https://github.com/cloudfoundry/cf-release/releases/tag/v216), Cloud Foundry requires SSL encryption for all Consul traffic by default.

To enable this SSL encryption, you must provide the following certificates and keys in your deployment manifest:

* `ca_cert`: Used to verify the keys
* `agent_cert` and `agent_key`: Used by every client-mode agent co-located across your VMs
* `server_cert` and `server_key`: Used by the cluster of Consul servers that the agents join

Additionally, you must add a 16-byte Base64-encoded `encrypt_key` property to your deployment manifest. 
Cloud Foundry encrypts data transmitted over Consul's "gossip" protocol using this `encrypt_key` value.

## <a id='certificates'></a>Step 1: Generate Certificates and Keys ##

To generate the certificates and keys that you need for Consul, we recommend using [certstrap](https://github.com/square/certstrap). 

The [cf-release/scripts](https://github.com/cloudfoundry/cf-release/scripts) repository contains a helper script, `generate-consul-certs`. This script uses certstrap to initialize a certificate authority (CA), and generate the certificates and keys for Consul.

If you already have a CA, you may have an existing workflow. 
If you do not have a CA, modify the `generate-consul-certs` script to use your CA instead of generating a new one.

The `generate-consul-certs` script outputs files to the `./consul-certs` directory. You use the contents of these output files in [Step 3: Modify your Deployment Manifest](#manifest).

## <a id='encrypt-key'></a>Step 2: Generate encrypt_key ##

Run `cat /dev/urandom | head -c 16 | base64` to generate and display a random 16-byte Base64-encoded value. You use this value as the `encrypt_key` in [Step 3: Modify your Deployment Manifest](#manifest).

Example:

<pre class='terminal'>
$ cat /dev/urandom | head -c 16 | base64
8b9IJjXH5aN2Z9A5H8HAmg==
</pre>

## <a id='manifest'></a>Step 3: Modify your Deployment Manifest ##

Add the certificates, keys, and `encrypt_key` value to your deployment manifest.

Either manually edit your existing deployment manifest, or use the `generate_deployment_manifest` script from `cf-release` to generate a deployment manifest as follows:

1. In the `cf-release` directory, create a stub file named `consul-stub.yml`. 

1. Copy the following text into the `consul-stub.yml` file: 


    ```yaml
    properties:
      consul:
        encrypt_key: RANDOM-16-BYTE-BASE64-ENCODED-VALUE
        ca_cert: |
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
        agent_cert: |
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
        agent_key: |
          -----BEGIN RSA PRIVATE KEY-----
          ...
          -----END RSA PRIVATE KEY-----
        server_cert: |
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
        server_key: |
          -----BEGIN RSA PRIVATE KEY-----
          ...
          -----END RSA PRIVATE KEY-----
    ```

1. Copy the contents of the files in the `./consul-certs` directory to the `consul-stub.yml` file. You generated these files in [Step 1: Generate Certificates and Keys](#certificates).
 
1. Replace RANDOM-16-BYTE-BASE64-ENCODED-VALUE with your [encrypt-key](#encrypt-key).

1. Run `generate_deployment_manifest IAAS consul-stub.yml > cf-dm.yml` to create a deployment manifest named `cf-dm.yml`. Replace IAAS with `aws`, `openstack`, or `vsphere`.  For example:

    <pre class="terminal">
	$ ./generate_deployment_manifest aws consul-stub.yml > cf-dm.yml
    </pre>