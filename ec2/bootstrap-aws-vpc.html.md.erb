---
title: Deploying Cloud Foundry on AWS with BOSH AWS Bootstrap
---

<table style="width: 60%;"><tr><td>
<strong>WARNING</strong>: The command <code>bosh aws destroy</code> destroys everything in your AWS account, including all S3 buckets and all instances. Do not use this command unless you want to lose <strong>everything</strong> in your AWS account, including objects and files unrelated to your Cloud Foundry deployment.
</td></tr></table>

Cloud Foundry tools simplify the process of deploying a Cloud Foundry instance
to a variety of platforms, including Amazon Web Services (AWS).
The following document guides you through using BOSH and the [cf Command Line Interface (CLI)](../../devguide/installcf/index.html) to deploy
Cloud Foundry to Amazon Web Services.

## <a id="domain-prep"></a> Prepare a Domain ##

1. Select a DNS domain name for your Cloud Foundry instance.
For example, if you select the domain name *cloud.example.com*, Cloud Foundry deploys each of your applications as *APP-NAME.cloud.example.com*.

1. Create an AWS Route 53 Hosted Zone for your domain on the [AWS Route 53 control panel](https://console.aws.amazon.com/route53).

1. Select the checkbox for a hosted zone to view the **Hosted Zone Details**  panel. The panel displays the **Name Servers** section, which contains a list of addresses to which you must delegate DNS authority for your domain. For example, if you selected the domain name *cloud.example.com*, each address in **Name Servers** should become an NS record in the DNS server for
*example.com*.

<%= image_tag("hostedzone.png") %>

## <a id="deployment-env-prep"></a> Prepare the Deployment Environment ##

Ruby 1.9.3 and git (1.8 or later) are prerequisites for the following
steps.

1. After you install Ruby and git, install the `bundler` RubyGem:

    <pre class="terminal">
    $ gem install bundler
    </pre>

1. Create a deployments directory with a sub-directory for your deployment.

    <pre class="terminal">
    $ mkdir deployments
    $ cd deployments
    $ mkdir cf-example
    </pre>

1. In the `cf-example` sub-directory, create a file named `Gemfile` with the following contents:

    ~~~
    source 'https://rubygems.org'
    ruby "1.9.3"
    gem "bosh_cli_plugin_aws"
    ~~~

1. Run `bundle install` to install the gems you specified in the `Gemfile`.

    <pre class="terminal">
    $ bundle install
    </pre>

1. Create a file named `bosh_environment` and add the following contents,
replacing the values in each line to match your configuration.
cat 
    Note the following:
    * The values that you add for <code>BOSH_VPC_DOMAIN</code> and <code>BOSH_VPC_SUBDOMAIN</code> must correspond to the DNS domain name that you set up when configuring Route 53. The example below uses <code>my-subdomain.example.com</code>.
    * The values that you add for <code>BOSH_AWS_ACCESS_KEY_ID</code> and <code>BOSH_SECRET_ACCESS_KEY</code> are the [AWS credentials](../../bosh/deploy-microbosh-to-aws.html#credentials) you established when you deployed MicroBOSH to AWS.
    * For the `BOSH_VPC_PRIMARY_AZ` and `BOSH_VPC_SECONDARY_AZ` properties, choose an availability zone that is listed as "operating normally" in the Health Status section of the [AWS Console](https://console.aws.amazon.com/ec2/v2/home?region=us-east-1) for your region.

    ~~~
    export BOSH_VPC_DOMAIN=example.com
    export BOSH_VPC_SUBDOMAIN=my-subdomain
    export BOSH_AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID
    export BOSH_AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY
    export BOSH_AWS_REGION=us-east-1
    export BOSH_VPC_PRIMARY_AZ=us-east-1a
    export BOSH_VPC_SECONDARY_AZ=us-east-1b
    ~~~

    <p class="note"><strong>Note</strong>: The following steps only support deployment to the <code>us-east-1</code> region of AWS.<br><br>
To deploy MicroBOSH to a different region, see <a href="https://gist.github.com/danhigham/5804252">this guide</a>.</p>


1. Run `source bosh_environment` to set the environment variables required for deploying to AWS.

    <pre class="terminal">
    $ source bosh_environment
    </pre>

1. Run `bosh aws create` to create a VPC Internet Gateway, VPC subnets,
three RDS databases, and a NAT VM for Cloud Foundry subnet routing.
This command generates two receipt files, `aws_rds_receipt.yml` and
`aws_vpc_receipt.yml`, that you use when deploying Cloud Foundry.

    <pre class="terminal">
    $ bosh aws create
    Executing migration CreateKeyPairs
    allocating 1 KeyPair(s)
    Executing migration CreateVpc
    . . .
    details in S3 receipt: aws_rds_receipt and file: aws_rds_receipt.yml
    Executing migration CreateS3
    creating bucket xxxx-bosh-blobstore
    creating bucket xxxx-bosh-artifacts
    </pre>

    <p class="note"><strong>Note</strong>: RDS database creation may take 20 or more minutes.</p>

## <a id="deploy-microbosh"></a> Deploy MicroBOSH ##

Refer to the instructions in the BOSH [Deploying MicroBOSH to AWS](../../bosh/deploy-microbosh-to-aws.html) topic to deploy MicroBOSH to AWS.

## <a id="create-a-stub"></a>Create a Deployment Manifest Stub ##

Create a manifest stub file named `cf-stub.yml`. [Customize the manifest stub](../cf-stub-aws.html) for your environment.

## <a id="deploy-cloudfoundry"></a>Deploy Cloud Foundry##

1. Clone the `cf-release` GitHub repository.

    <pre class="terminal">
    $ git clone https://github.com/cloudfoundry/cf-release.git
    </pre>

1. Use the `update` helper script to update the `cf-release` submodules:

    <pre class="terminal">
    $ cd cf-release
    $ ./update
    </pre>

1. Install [Spiff](https://github.com/cloudfoundry-incubator/spiff).

1. Run the following Spiff command from the `cf-release` directory to create a deployment manifest named `cf-deployment.yml`:

    `./generate_deployment_manifest INFRASTRUCTURE MANIFEST-STUB > cf-deployment.yml`

    Replace INFRASTRUCTURE with `aws` and replace MANIFEST-STUB with the name and location of your `cf-stub.yml file`. For example:

    <pre class="terminal">
	$ ./generate_deployment_manifest aws cf-stub.yml > cf-deployment.yml
    </pre>

1. Use `bosh target` to target the BOSH Director:

    <pre class="terminal">
    $ bosh target
    Current target is https://x.x.x.x:25555 (micro-xxxxxx)
    </pre>

1. Set your deployment to the generated manifest:

    <pre class="terminal">
    $ bosh deployment cf-deployment.yml
    </pre>

1. Use `bosh create release` to create a Cloud Foundry release.
This command prompts you for a development release name.

    <pre class="terminal">
    $ bosh create release
    </pre>

1. Use `bosh upload release` to upload the generated release to the BOSH
Director:

    <pre class="terminal">
    $ bosh upload release
    </pre>

1. Deploy the uploaded Cloud Foundry release:

    <pre class="terminal">
    $ bosh deploy
    </pre>

    <p class="note"><strong>Note</strong>: <code>bosh deploy</code> can take 2-3 hours to complete.</p>

1. Use `curl` to test the API endpoint of your Cloud Foundry installation.

    <pre class="terminal">
    $ curl api.subdomain.domain/info
    </pre>

    If `curl` succeeds, it should return the JSON-formatted information.
	If `curl` does not succeeds, check your networking and make sure your domain
	has an NS record for your subdomain.

1. You should be able to target your Cloud Foundry installation with the [cf Command Line Interface (CLI)](/devguide/installcf/index.html) and log in as an
administrator.

    The user name, `admin` and the password, `fakepassword`, are specified in
    the deployment manifest under **uaa:scim:users**.

    For more information about managing organizations, spaces, users, and
    applications, refer to the [cf](/devguide/installcf/index.html) topic.

## <a id="updates"></a>Update Cloud Foundry##

* If you make change to your manifest, run `bosh deploy` to update your Cloud
Foundry deployment with these changes.

* If you make changes to the `cf-release` directory, run `bosh create release && bosh upload release && bosh deploy` to update your Cloud Foundry deployment with these changes.

## <a id="deploy-cloudfoundry-services"></a>Deploy Cloud Foundry Services##

If you want your Cloud Foundry to be able to provision services, you must deploy
a services release. Refer to the [services documentation](/services/).

You also might be interested in the [community-managed services release](https://github.com/cloudfoundry/cf-services-contrib-release).

## <a id="destroy-environment"></a>Destroying the AWS Environment ##

1. Use `bosh aws destroy` to destroy your AWS environment.

    <table style="width: 60%;"><tr><td>
    <strong>WARNING</strong>: The command <code>bosh aws destroy</code> destroys everything in your AWS account, including all S3 buckets and all instances. Do not use this command unless you want to lose <strong>everything</strong> in your AWS account, including objects and files unrelated to your Cloud Foundry deployment.
    </td></tr></table>

	<pre class="terminal">
	$ bosh aws destroy
	</pre>

1. Remove any YAML artifacts:

    <pre class="terminal">
    $ rm -f *.yml
    </pre>
