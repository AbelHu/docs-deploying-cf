---
title: Customizing the Cloud Foundry Deployment Manifest Stub for AWS
---

<strong><%= modified_date %></strong>

This topic describes how to create the Cloud Foundry deployment manifest stub for AWS. The manifest stub is a YAML configuration file that the script `generate_deployment_manifest` combines with other configuration files in the `cf-release` repository to generate your Cloud Foundry deployment manifest.

Save a copy of the manifest stub as a YAML file in your deployment directory.
Follow the [editing instructions](#editing) to customize the manifest stub with
information about your environment.

##<a id="stub"></a>Cloud Foundry Deployment Manifest Stub for AWS ##

<%= yield_for_code_snippet from: 'cloudfoundry/cf-release', at: 'cf-stub-aws' %>

##<a id="editing"></a>Editing Instructions ##

<table border="1" class="nice">
  <tr>
    <th style="width:35%">Deployment Manifest Stub Contents</th>
    <th>Editing Instructions</th>
  </tr>
  <tr>
    <td><pre><code>
meta:
  environment: ENVIRONMENT
    </code></pre></td>
    <td>Replace <code>ENVIRONMENT</code> with an arbitrary name describing your environment, e.g. <code>aws-prod</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
director_uuid: DIRECTOR_UUID
    </code></pre></td>
    <td>Replace <code>DIRECTOR_UUID</code> with the BOSH Director UUID. Use
    <code>bosh status --uuid</code> to view the BOSH Director UUID.
    </td>
  </tr>
  <tr>
    <td><pre><code>
networks:
- name: cf1
  subnets:
    - range: 10.10.16.0/20
      reserved:
        - 10.10.16.2 - 10.10.16.9
      static:
        - 10.10.16.10 - 10.10.16.255
      gateway: 10.10.16.1
      dns:
        - 10.10.0.2
      cloud_properties:
        security_groups:
          - cf
        subnet: (( properties.template_only.aws.subnet_ids.cf1 ))
- name: cf2
  subnets:
    - range: 10.10.80.0/20
      reserved:
        - 10.10.80.2 - 10.10.80.9
      static:
        - 10.10.80.10 - 10.10.80.255
      gateway: 10.10.80.1
      dns:
        - 10.10.0.2
      cloud_properties:
        security_groups:
          - cf
        subnet: (( properties.template_only.aws.subnet_ids.cf2 ))
	  </code></pre></td>
    <td>If you used <code>bosh aws create</code> to set up your AWS environment, this section needs no changes.
    <br/><br/>
    This example assumes you have two subnets in your AWS VPC with CIDRs <code>10.10.16.0/20</code> and <code>10.10.80.0/20</code> respectively. Update the values for <code>range</code>, <code>reserved</code>, <code>static</code>, and <code>gateway</code> accordingly if the CIDRs for your subnets are different.
    <br/><br/>
    This also assumes that you have a security group <code>cf</code> suitable for your Cloud Foundry VMs. Change this too if the name of your security group is different.
	  </td>
  </tr>
  <tr>
    <td><pre><code>
properties:
  template_only:
    aws:
      access_key_id: AWS_ACCESS_KEY
      secret_access_key: AWS_SECRET_ACCESS_KEY
      availability_zone: ZONE_1
      availability_zone2: ZONE_2
      subnet_ids:
        cf1: SUBNET_ID_1
        cf2: SUBNET_ID_2
	  </code></pre></td>
    <td>Replace <code>AWS_ACCESS_KEY</code> and <code>AWS_SECRET_ACCESS_KEY</code> with AWS credentials to allow Cloud Controller to manage assets in the S3 buckets you have prepared for this deployment.
    <br/><br/>
    Replace <code>ZONE_1</code> and <code>ZONE_2</code> with two EC2 Availability Zones that you want to distribute your deployment across.
    <br/><br/>
    Replace <code>SUBNET_ID_1</code> and <code>SUBNET_ID_2</code> with the VPC subnet IDs corresponding to the subnets configured in the <code>networks</code> section above.
    <br/><br/>
    If you used <code>bosh aws create</code>, the key and zone values are in  the <code>bosh_environment</code> file that you originally bootstrapped from and the subnet IDs will correspond to the subnets cf1 and cf2 already created.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  domain: DOMAIN
  system_domain: SYSTEM_DOMAIN
  system_domain_organization: SYSTEM_DOMAIN_ORGANIZATION
  app_domains:
   - APP_DOMAIN
	  </code></pre></td>
    <td>Replace <code>DOMAIN</code>, <code>SYSTEM_DOMAIN</code>, and <code>APP_DOMAIN</code> with the full domain you want associated with applications pushed to your Cloud Foundry installation. Example: "cloud-09.cf-app.com."
    <br/><br/>
    If you used <code>bosh aws create</code>, this value comes from concatenating the <code>BOSH_VPC_SUBDOMAIN</code> and <code>BOSH_VPC_DOMAIN</code> values in the <code>bosh_environment</code> file.
    <br/><br/>
    Pick any name you like for the <code>SYSTEM_DOMAIN_ORGANIZATION</code>. This organization will be created and configured to own the <code>SYSTEM_DOMAIN</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  cc:
    droplets:
      droplet_directory_key: DROPLET_DIRECTORY_KEY
    buildpacks:
      buildpack_directory_key: BUILDPACK_DIRECTORY_KEY
    staging_upload_user: STAGING_UPLOAD_USER
    staging_upload_password: STAGING_UPLOAD_PASSWORD
    bulk_api_password: BULK_API_PASSWORD
    db_encryption_key: CCDB_ENCRYPTION_KEY
	  </code></pre></td>
    <td>Replace <code>DROPLET_DIRECTORY_KEY</code> with the directory (bucket) used to store droplets.
    <br /><br />
    Replace <code>BUILDPACK_DIRECTORY_KEY</code> with the directory (bucket) used to store
    buildpacks. 
    <br /><br />
    If you used <code>bosh aws create</code>, find the <strong>S3 Dashboard</strong>, select the bucket with "blobstore" in the name, click "Properties," and use the <code>Endpoint</code> for the two values above. Example: "cloud09-cf-app-com-bosh-blobstore.s3-website-us-west-1.amazonaws.com."
    <br /><br />
    Replace <code>STAGING_UPLOAD_USER</code> with the account user name used to upload files to the Cloud Controller.
    <br /><br />
    Replace <code>STAGING_UPLOAD_PASSWORD</code> with the password of the account used to upload files to the Cloud Controller.
    <br /><br />
    Replace <code>BULK_API_PASSWORD</code>
    with the password used to access the bulk_api.
    <br /><br />
    Replace <code>CCDB_ENCRYPTION_KEY</code>
    with a secure key that you generate to encrypt sensitive values in the
    Cloud Controller database.
    <br/><br/>
    You can use any values for user, passwords, and key depending on your security needs.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  ccdb:
    db_scheme: CCDB_SCHEME
    roles:
      - tag: CCDB_USER
        name: CCDB_USER_NAME
        password: CCDB_PASSWORD
    databases:
      - tag: cc
        name: ccdb
    address: CCDB_ADDRESS
    port: CCDB_PORT
    </code></pre></td>
    <td>This assumes you are using an external MySQL or PostgreSQL database service like Amazon RDS for your Cloud Controller database, and have already provisioned this. Replace <code>CCDB_SCHEME</code>, <code>CCDB_USER</code>, <code>CCDB_USER_NAME</code>, <code>CCDB_PASSWORD</code>, <code>CCDB_ADDRESS</code>, and <code>CCDB_PORT</code> with the appropriate values.
    <br/><br/>
    If you used <code>bosh aws create</code>, these values are in the <code>aws_rds_bosh_receipt.yml</code> file that it generated.
	</td>
  </tr>
  <tr>
    <td><pre><code>
  consul:
    encrypt_keys:
      - CONSUL_ENCRYPT_KEY
    ca_cert: CONSUL_CA_CERT
    server_cert: CONSUL_SERVER_CERT
    server_key: CONSUL_SERVER_KEY
    agent_cert: CONSUL_AGENT_CERT
    agent_key: CONSUL_AGENT_KEY
	  </code></pre></td>
    <td>See the instructions on <a href="../common/consul-security.html">security configuration for consul</a>.
    <br/><br/>
    You can use any values for keys and certs depending on your security needs.
	  </td>
  </tr>
  <tr>
    <td><pre><code>
  loggregator_endpoint:
    shared_secret: LOGGREGATOR_ENDPOINT_SHARED_SECRET
    </code></pre></td>
    <td>Replace <code>LOGGREGATOR_ENDPOINT_SHARED_SECRET</code> with any secure secret.
    <br/><br/>
    You can use any value for secret depending on your security needs.
	  </td>
  </tr>
  <tr>
    <td><pre><code>
  nats:
    user: NATS_USER
    password: NATS_PASSWORD
	  </code></pre></td>
    <td>Replace <code>NATS_USER</code> and
		<code>NATS_PASSWORD</code> with a secure username and password. Cloud Foundry components will use this to communicate with each other over the NATS message bus.
    <br/><br/>
    You can use any values for username and password depending on your security needs.
	  </td>
  </tr>
  <tr>
    <td><pre><code>
  router:
    status:
      user: ROUTER_USER
      password: ROUTER_PASSWORD
	  </code></pre></td>
    <td>Replace <code>ROUTER_USER</code> and
    <code>ROUTER_PASSWORD</code> with a secure username and password.
    <br/><br/>
    You can use any values for username and password depending on your security needs.
	  </td>
  </tr>
  <tr>
    <td><pre><code>
  uaa:
    admin:
      client_secret: ADMIN_SECRET
    cc:
      client_secret: CC_CLIENT_SECRET
    clients:
      cc_routing:
        secret: CC_ROUTING_SECRET
      cloud_controller_username_lookup:
        secret: CLOUD_CONTROLLER_USERNAME_LOOKUP_SECRET
      doppler:
        secret: DOPPLER_SECRET
      gorouter:
        secret: GOROUTER_SECRET
      login:
        secret: LOGIN_CLIENT_SECRET
      notifications:
        secret: NOTIFICATIONS_CLIENT_SECRET
    </code></pre></td>
    <td>Replace all the <code>*_SECRET</code>s with secure secrets.
	  </td>
    <br/><br/>
    You can use any values for secrets depending on your security needs.
  </tr>
  <tr>
    <td><pre><code>
    jwt:
      verification_key: JWT_VERIFICATION_KEY
      signing_key: JWT_SIGNING_KEY
    </code></pre></td>
    <td>Replace <code>JWT_SIGNING_KEY</code> with an RSA private key, and <code>JWT_VERIFICATION_KEY</code> with the corresponding RSA public key.<br/>
    Paste in the full keys, including the "BEGIN" and "END" delimiter lines.
    </td>
  </tr>
  <tr>
    <td><pre><code>
    scim:
      users:
        - admin|ADMIN_PASSWORD|scim.write,scim.read,o...
    </code></pre></td>
    <td>Replace <code>ADMIN_PASSWORD</code> with a secure password. This will be the password for the Admin user of your Cloud Foundry installation.
    </td>
    <br/><br/>
    You can use any value for password depending on your security needs.
  </tr>
  <tr>
    <td><pre><code>
  uaadb:
    db_scheme: UAADB_SCHEME
    roles:
      - tag: UAADB_USER
        name: UAADB_USER_NAME
        password: UAADB_USER_PASSWORD
    databases:
      - tag: uaa
        name: uaadb
    address: UAADB_ADDRESS
    port: UAADB_PORT
	  </code></pre></td>
    <td>This assumes you are using an external MySQL or PostgreSQL database service like Amazon RDS for your UAA database, and have already provisioned this. Replace <code>UAADB_SCHEME</code>, <code>UAADB_USER</code>, <code>UAADB_USER_NAME</code>, <code>UAADB_PASSWORD</code>, <code>UAADB_ADDRESS</code>, and <code>UAADB_PORT</code> with the appropriate values.
    <br/><br/>
    If you used <code>bosh aws create</code>, these values are in the <code>aws_rds_bosh_receipt.yml</code> file that it generated.
	</td>
  </tr>
</table>
